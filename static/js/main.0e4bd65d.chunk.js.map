{"version":3,"sources":["helpers.js","components/Trip.js","components/App.js","registerServiceWorker.js","index.js"],"names":["pad0","n","getTime","date","d","Date","getHours","getMinutes","map","join","getISODate","getUTCFullYear","getUTCMonth","getUTCDate","isPastTrip","t","d2","getFullYear","getMonth","getDate","Trip","_this$props","this","props","stations","isCurrent","ignoreStations","time","hour","replace","isDone","split","i","Number","filteredStations","filter","st","indexOf","station","react_default","a","createElement","className","concat","React","PureComponent","getPeriodFromDates","dates","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","da","value","_map","start","end","reverse","_map2","Object","slicedToArray","s1","s2","_map3","s","construct","toConsumableArray","_map4","d1","type","err","return","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","data","store","get","state","campus","period","currentPeriod","nextCampus","bind","assertThisInitialized","nextPeriod","updateTime","_this2","fetch","then","res","json","set","setState","campi","length","periods","_this$state","trips","str","isCurrentPeriod","myCampus","myTrips","sort","onClick","style","lineHeight","charAt","toUpperCase","slice","id","lib","svg","text","trip","components_Trip","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_components_App","document","getElementById","URL","process","origin","addEventListener","response","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0e4bd65d.chunk.js","sourcesContent":["export function pad0(n) {  // padding with 0\n  return n > 9 ? n : '0' + n;\n}\n\nexport function getTime(date) {\n  const d = date || new Date();\n  return [d.getHours(), d.getMinutes()].map(pad0).join(':');\n}\n\nexport function getISODate(date) {\n  const d = date || new Date();\n  return [d.getUTCFullYear(), d.getUTCMonth() + 1, d.getUTCDate()].map(pad0).join('-');\n}\n\nexport function capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function isPastTrip(t) {\n  const d = new Date();\n  const d2 = new Date(d.getFullYear(), d.getMonth(), d.getDate(), t[0], t[1], 0);\n  return d > d2;\n}\n","import React from 'react';\nimport { isPastTrip } from '../helpers';\n\nclass Trip extends React.PureComponent {\n  render() {\n    const { stations, isCurrent } = this.props;\n    const ignoreStations = ['PraÃ§a de Londres', 'Sete-Rios'];\n\n    // find past trips\n    const time = stations[0].hour.replace(/\\./g, ':');\n    const isDone = isPastTrip(time.split(':').map(i => Number(i)));\n\n    // create trip-stops string\n    const filteredStations = stations\n      .filter(st => ignoreStations.indexOf(st.station) === -1)\n      .map(st => st.station)\n      .join(' > ')\n      .replace(/Taguspark/g, 'Tagus');\n\n    return (\n      <div className={`card${isDone && isCurrent ? ' done' : ''}`}>\n        <span className={'entry'}>\n          <strong>{time}</strong> {filteredStations}\n        </span>\n      </div>\n    );\n  }\n}\n\nexport default Trip;\n","import React from 'react';\nimport store from 'store';\nimport { Twemoji } from 'react-emoji-render';\nimport Trip from './Trip';\nimport './App.css';\nimport { capitalize, getTime, getISODate, isPastTrip } from '../helpers';\n\nconst URL = 'https://web.tecnico.ulisboa.pt/~ist178013/api/shuttle/';\n\nfunction getPeriodFromDates(dates) {\n  const date = new Date();\n\n  for (const da of dates) {\n    const [s1, s2] = [da.start, da.end].map(d => d.split('/').reverse().map(d => Number(d)));\n    s1[1]--;\n    s2[1]--;\n    const [d1, d2] = [s1, s2].map(s => new Date(...s));\n    if (date >= d1 && date <= d2) return da.type;\n  }\n\n  return 'weekend';\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const data = store.get('data');\n\n    this.state = {\n      date: getISODate(),\n      time: getTime(),\n      campus: 'Taguspark',\n      period: 'weekday',\n      currentPeriod: undefined,\n      data: data || undefined,\n    };\n\n    this.nextCampus = this.nextCampus.bind(this);\n    this.nextPeriod = this.nextPeriod.bind(this);\n    this.updateTime = this.updateTime.bind(this);\n  }\n\n  componentDidMount() {\n    const { data } = this.state;\n\n    if (data === undefined) {\n      fetch(URL)\n        .then((res) => res.json())\n        .then((data) => {\n          const period = getPeriodFromDates(data.date);\n          store.set('data', data);\n          this.setState({ data, period, currentPeriod: period });\n        });\n    } else {\n      const period = getPeriodFromDates(data.date);\n      this.setState({ period, currentPeriod: period });\n    }\n  }\n\n  nextCampus() {\n    const { campus } = this.state;\n    const campi = ['Taguspark', 'Alameda'];\n    const i = ((campi.indexOf(campus) || 0) + 1) % campi.length;\n\n    this.setState({ campus: campi[i] });\n  }\n\n  nextPeriod() {\n    const { period } = this.state;\n    const periods = ['weekday', 'holidays', 'exams'];\n    const i = ((periods.indexOf(period) || 0) + 1) % periods.length;\n\n    this.setState({ period: periods[i] });\n  }\n\n  updateTime() {\n    this.setState({ time: getTime() });\n  }\n\n  render() {\n    const { data, time, campus, period, currentPeriod } = this.state;\n    if (!data) return null;\n\n    const { trips } = data;\n    if (!trips) return null;\n\n    const isCurrentPeriod = period === currentPeriod;\n    const myCampus = (campus === 'Taguspark') ? 'Tagus\\nAlameda' : 'Alameda\\nTagus';\n    const myTrips = trips.filter(t => t.type === period && t.stations[0].station === campus);\n    if (isCurrentPeriod) {\n      myTrips.sort(t => isPastTrip(t.stations[0].hour.split('.').map(i => Number(i))) ? 1 : -1);\n    }\n\n    return (\n      <main>\n        <header>\n          <h3>\n            <div className={'right big'}>\n              <span onClick={this.updateTime} style={{ lineHeight: '3rem' }}>{time}</span>\n            </div>\n            <div className={'table'}>\n              <span className={'block big'} onClick={this.nextPeriod}>{capitalize(period)}</span>\n              <span className={'big'}>â</span>\n              <span className={'block normal'} onClick={this.nextCampus}>{myCampus}</span>\n            </div>\n          </h3>\n        </header>\n        <section id=\"infos\" className={'table'}>\n          {(period === 'weekend')\n            ? (<div className={'card'}>\n              <div>Today is weekend!</div>\n              <div><Twemoji svg text={'There is no Shuttle â ð ð¢'} /></div>\n            </div>)\n            : myTrips.map((trip, i) => (<Trip\n              key={i}\n              isCurrent={isCurrentPeriod}\n              stations={trip.stations} />))}\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}